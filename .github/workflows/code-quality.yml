name: Code Quality & Modularity

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  modularity-analysis:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Analyze code modularity
      run: |
        echo "## 📊 Code Modularity Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Generated on $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Initialize counters
        TOTAL_FILES=0
        TOTAL_LINES=0
        FILES_OVER_1000=0
        MAX_LINES=0
        MAX_FILE=""

        # Analyze each source file
        echo "### File Analysis:" >> $GITHUB_STEP_SUMMARY
        echo "| File | Lines | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-------|--------|" >> $GITHUB_STEP_SUMMARY

        for file in $(find src include -name "*.c" -o -name "*.h" | sort); do
          if [ -f "$file" ]; then
            lines=$(wc -l < "$file")
            TOTAL_FILES=$((TOTAL_FILES + 1))
            TOTAL_LINES=$((TOTAL_LINES + lines))

            if [ "$lines" -gt "$MAX_LINES" ]; then
              MAX_LINES=$lines
              MAX_FILE=$file
            fi

            if [ "$lines" -gt 1000 ]; then
              echo "| \`$file\` | $lines | 🚨 **TOO LARGE** |" >> $GITHUB_STEP_SUMMARY
              FILES_OVER_1000=$((FILES_OVER_1000 + 1))
              MODULARITY_ISSUES=true
            else
              echo "| \`$file\` | $lines | ✅ OK |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done

        echo "" >> $GITHUB_STEP_SUMMARY

        # Calculate statistics
        AVG_LINES=$((TOTAL_LINES / TOTAL_FILES))

        echo "### 📈 Statistics:" >> $GITHUB_STEP_SUMMARY
        echo "- **Total source files**: $TOTAL_FILES" >> $GITHUB_STEP_SUMMARY
        echo "- **Total lines of code**: $TOTAL_LINES" >> $GITHUB_STEP_SUMMARY
        echo "- **Average lines per file**: $AVG_LINES" >> $GITHUB_STEP_SUMMARY
        echo "- **Largest file**: \`$MAX_FILE\` ($MAX_LINES lines)" >> $GITHUB_STEP_SUMMARY
        echo "- **Files > 1000 lines**: $FILES_OVER_1000" >> $GITHUB_STEP_SUMMARY

        # Determine modularity grade
        if [ "$FILES_OVER_1000" -eq 0 ]; then
          MODULARITY_GRADE="A+"
          MODULARITY_COLOR="brightgreen"
          STATUS="✅ **PERFECT MODULARITY**"
        elif [ "$FILES_OVER_1000" -le 2 ]; then
          MODULARITY_GRADE="A"
          MODULARITY_COLOR="green"
          STATUS="✅ **GOOD MODULARITY**"
        elif [ "$FILES_OVER_1000" -le 5 ]; then
          MODULARITY_GRADE="B"
          MODULARITY_COLOR="yellow"
          STATUS="⚠️ **MODULARITY NEEDS IMPROVEMENT**"
        else
          MODULARITY_GRADE="C"
          MODULARITY_COLOR="red"
          STATUS="🚨 **MODULARITY CRITICAL**"
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎯 Modularity Grade: $MODULARITY_GRADE" >> $GITHUB_STEP_SUMMARY
        echo "$STATUS" >> $GITHUB_STEP_SUMMARY

        # Export for badge generation
        echo "MODULARITY_GRADE=$MODULARITY_GRADE" >> $GITHUB_ENV
        echo "MODULARITY_COLOR=$MODULARITY_COLOR" >> $GITHUB_ENV
        echo "FILES_OVER_1000=$FILES_OVER_1000" >> $GITHUB_ENV

        # Fail if too many large files
        if [ "$FILES_OVER_1000" -gt 3 ]; then
          echo "❌ Too many files over 1000 lines. Failing build."
          exit 1
        fi

  update-readme-badges:
    runs-on: ubuntu-latest
    needs: modularity-analysis
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update README badges
      run: |
        MODULARITY_GRADE="${{ needs.modularity-analysis.outputs.modularity-grade }}"
        MODULARITY_COLOR="${{ needs.modularity-analysis.outputs.modularity-color }}"
        FILES_OVER_1000="${{ needs.modularity-analysis.outputs.files-over-1000 }}"

        # Update modularity badge in README
        sed -i "s|https://img.shields.io/badge/modularity-[A-Z+]*-[a-z]*.svg|https://img.shields.io/badge/modularity-${MODULARITY_GRADE}-${MODULARITY_COLOR}.svg|g" README.md

        # Add modularity status comment
        if [ "$FILES_OVER_1000" -eq 0 ]; then
          echo "🎉 All files properly modularized!" >> README.md
        else
          echo "⚠️ $FILES_OVER_1000 files exceed 1000 lines" >> README.md
        fi

    - name: Commit badge updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        git commit -m "Update modularity badge - Grade: $MODULARITY_GRADE" || true
        git push || true
